import SpriteKit
import GameplayKit

let whiteColor = UIColor.white
let blackColor = UIColor.black

// Initialize your game scene, view, etc. in Swift using SpriteKit

let screenWidth: CGFloat = 800
let screenHeight: CGFloat = 600

// Assuming you have a GameScene class to handle the game
let scene = GameScene(size: CGSize(width: screenWidth, height: screenHeight))
scene.scaleMode = .aspectFill

// Create a view and present the scene
let view = SKView(frame: CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight))
view.presentScene(scene)

// Set up the font for displaying text
let font = UIFont.systemFont(ofSize: 36)

var productData: [String: [String: String]] = [
    "apple": ["number": "123", "image_url": "https://www.kochschule.de/sites/default/files/images/kochwissen/448/apfel.jpg"],
    "banana": ["number": "456", "image_url": "https://www.kochschule.de/sites/default/files/images/kochwissen/440/banane.jpg"],
    "orange": ["number": "789", "image_url": "https://www.kochschule.de/sites/default/files/images/kochwissen/432/orange.jpg"]
]

// Load images using a network request and SKTexture
var productImages: [String: SKTexture] = [:]
for (productName, data) in productData {
    let url = URL(string: data["image_url"]!)!
    let imageData = try! Data(contentsOf: url)
    let image = UIImage(data: imageData)!
    let texture = SKTexture(image: image)
    productImages[productName] = texture
}

var currentProductName = productImages.keys.randomElement()!
var currentProductNumber = productData[currentProductName]!["number"]!
var currentProductImage = productImages[currentProductName]!

// Define functions to display text and draw buttons using SpriteKit
func displayText(_ text: String, x: CGFloat, y: CGFloat) {
    let textNode = SKLabelNode(fontNamed: "Arial")
    textNode.text = text
    textNode.fontColor = blackColor
    textNode.position = CGPoint(x: x, y: y)
    scene.addChild(textNode)
}

func drawButton(_ text: String, x: CGFloat, y: CGFloat, width: CGFloat, height: CGFloat) {
    let button = SKShapeNode(rect: CGRect(x: x, y: y, width: width, height: height))
    button.strokeColor = blackColor
    button.lineWidth = 2
    scene.addChild(button)
    
    let textNode = SKLabelNode(fontNamed: "Arial")
    textNode.text = text
    textNode.fontColor = blackColor
    textNode.position = CGPoint(x: x + width / 2, y: y + height / 2)
    scene.addChild(textNode)
}

var inputText = ""

// Handle user input and game loop within your GameScene class
// Use touchesBegan and update methods to handle touch input and game logic


